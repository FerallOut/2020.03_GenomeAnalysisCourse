n = nchar(DNA_sequence)%/%3
DNA_sequence <- ('GGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCACCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAAGGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCTCTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTTCTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGGAGAAGTAACAGGGTACAGTTTAGAATGGGAAACAGACGAATGATT')
n = nchar(DNA_sequence)%/%3
y<-rep("N",nchar(DNA_sequence))
x<-unlist(strsplit(DNA_sequence,NULL))
Compl_sequence <- c('')
for (i in 1:nchar(DNA_sequence)){
if(x[i]=="A") y[i]<-"T"
if(x[i]=="C") y[i]<-"G"
if(x[i]=="G") y[i]<-"C"
if(x[i]=="T") y[i]<-"A"
Compl_sequence <- paste(Compl_sequence,y[i],sep="")
}
Compl_sequence
y<-rep("N",nchar(DNA_seq))
DNA_seq <- ('GGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCACCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAAGGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCTCTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTTCTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGGAGAAGTAACAGGGTACAGTTTAGAATGGGAAACAGACGAATGATT')
# a nucleatide is described by a triplet
n = nchar(DNA_seq)%/%3
DNA_seq <- ('GGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCACCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAAGGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCTCTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTTCTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGGAGAAGTAACAGGGTACAGTTTAGAATGGGAAACAGACGAATGATT')
# a nucleatide is described by a triplet
n = nchar(DNA_seq)%/%3
y<-rep("N",nchar(DNA_seq))
x<-unlist(strsplit(DNA_seq,NULL))
Compl_seq <- c('')
for (i in 1:nchar(DNA_seq)){
if(x[i]=="A") y[i]<-"T"
if(x[i]=="C") y[i]<-"G"
if(x[i]=="G") y[i]<-"C"
if(x[i]=="T") y[i]<-"A"
Compl_seq <- paste(Compl_seq,y[i],sep="")
}
Compl_sequence
y <- rep("N",nchar(DNA_seq))
x <- unlist(strsplit(DNA_seq, NULL))
Compl_seq <- c('')
# Complimentarity: A->T, C->G
for (i in 1:nchar(DNA_seq)){
if(x[i] == "A") y[i] <-"T"
if(x[i] == "C") y[i] <-"G"
if(x[i] == "G") y[i] <-"C"
if(x[i] == "T") y[i] <-"A"
Compl_seq <- paste(Compl_seq,y[i],sep="")
}
Compl_sequence
y <- rep("N",nchar(DNA_seq))
x <- unlist(strsplit(DNA_seq, NULL))
Compl_seq <- c('')
# Complimentarity: A->T, C->G
for (i in 1:nchar(DNA_seq)){
if(x[i] == "A") y[i] <-"T"
if(x[i] == "C") y[i] <-"G"
if(x[i] == "G") y[i] <-"C"
if(x[i] == "T") y[i] <-"A"
Compl_seq <- paste(Compl_seq,y[i],sep="")
}
Compl_seq
y <- rep("N",nchar(DNA_seq))
x <- unlist(strsplit(DNA_seq, NULL))
Compl_seq <- c('')
# Complimentarity: A->T, C->G
for (i in 1:nchar(DNA_seq)){
if(x[i] == "A") "T" -> y[i]
if(x[i] == "C") "G" -> y[i]
if(x[i] == "G") "C" -> y[i]
if(x[i] == "T") "A" -> y[i]
Compl_seq <- paste(Compl_seq,y[i],sep="")}
Compl_seq
y <- rep("N",nchar(DNA_seq))
x <- unlist(strsplit(DNA_seq, NULL))
Compl_seq <- c('')
# Complimentarity: A->T, C->G
for (i in 1:nchar(DNA_seq)){
if(x[i] == "A") "T" -> y[i]
if(x[i] == "C") "G" -> y[i]
if(x[i] == "G") "C" -> y[i]
if(x[i] == "T") "A" -> y[i]
Compl_seq <- paste(Compl_seq,y[i],sep="")}
Compl_seq
DNA <- ('GGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCACCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAAGGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCTCTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTTCTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGGAGAAGTAACAGGGTACAGTTTAGAATGGGAAACAGACGAATGATT')
# a nucleatide is described by a triplet
n = nchar(DNA)%/%3
y <- rep("N",nchar(DNA))
x <- unlist(strsplit(DNA, NULL))
DNA_Complement <- c('')
# Complimentarity: A->T, C->G
for (i in 1:nchar(DNA)){
if(x[i] == "A") "T" -> y[i]
if(x[i] == "C") "G" -> y[i]
if(x[i] == "G") "C" -> y[i]
if(x[i] == "T") "A" -> y[i]
DNA_Complement <- paste(DNA_Complement, y[i], sep="")}
DNA_Complement
y <- rep("N",nchar(DNA))
x <- unlist(strsplit(DNA_Complement,NULL))
RNA <- c('')
for (i in 1:nchar(DNA)){
if(x[i]=="A") "U" -> y[i]
if(x[i]=="C") "G" -> y[i]
if(x[i]=="G") "C"-> y[i]
if(x[i]=="T") "A" -> y[i]
RNA <- paste(RNA,y[i],sep="")}
RNA
#Start_Num <- stringi::stri_count_fixed(str = RNA, pattern = 'AUG')
#Start_Num
Met_codons <- c('UAG','UAA','UGA')
Stop_Num <- sum(stringi::stri_count_fixed(str = RNA, pattern = Met_codons))
Stop_Num
#Start_Num <- stringi::stri_count_fixed(str = RNA, pattern = 'AUG')
#Start_Num
Met_codons <- c('UAG','UAA','UGA')
counts_codons <- sum(stringi::stri_count_fixed(str = RNA, pattern = Met_codons))
print(counts_codons)
start_codons <- stringi::stri_count_fixed(str = RNA, pattern = 'AUG')
print(start_codons)
Met_codons <- c('UAG','UAA','UGA')
counts_codons <- sum(stringi::stri_count_fixed(str = RNA, pattern = Met_codons))
print(counts_codons)
Start_Num <- stringi::stri_count_fixed(str = RNA_sequence, pattern = 'AUG')
DNA_sequence <- 'GGCATGAAAGTCAGGGCAGAGCCATCTATTGCTTACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCACCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGTTGGTATCAAGGTTACAAGACAGGTTTAAGGAGACCAATAGAAACTGGGCATGTGGAGACAGAGAAGACTCTTGGGTTTCTGATAGGCACTGACTCTCTCTGCCTATTGGTCTATTTTCCCACCCTTAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGGTGAGTCTATGGGACCCTTGATGTTTTCTTTCCCCTTCTTTTCTATGGTTAAGTTCATGTCATAGGAAGGGGAGAAGTAACAGGGTACAGTTTAGAATGGGAAACAGACGAATGATT'
n = nchar(DNA_sequence)%/%3
y<-rep("N",nchar(DNA_sequence))
x<-unlist(strsplit(DNA_sequence,NULL))
Compl_sequence <- c('')
for (i in 1:nchar(DNA_sequence)){
if(x[i]=="A") y[i]<-"T"
if(x[i]=="C") y[i]<-"G"
if(x[i]=="G") y[i]<-"C"
if(x[i]=="T") y[i]<-"A"
Compl_sequence <- paste(Compl_sequence,y[i],sep="")
}
Compl_sequence
y<-rep("N",nchar(DNA_sequence))
x<-unlist(strsplit(Compl_sequence,NULL))
RNA_sequence <- c('')
for (i in 1:nchar(DNA_sequence)){
if(x[i]=="A") y[i]<-"U"
if(x[i]=="C") y[i]<-"G"
if(x[i]=="G") y[i]<-"C"
if(x[i]=="T") y[i]<-"A"
RNA_sequence <- paste(RNA_sequence,y[i],sep="")
}
RNA_sequence
Start_Num <- stringi::stri_count_fixed(str = RNA_sequence, pattern = 'AUG')
Start_Num
stop_codon <- c('UAG','UAA','UGA')
Stop_Num <- sum(stringi::stri_count_fixed(str = RNA_sequence, pattern = stop_codon))
Stop_Num
#############################################################
# 						Exercise 1							#
# Using R for testing deviations from Hardy Weinberg 	    #
#############################################################
#Testing for deviation from HWE using R
# numbers of genotypes (#replace NN with numbers provided)
A1A1 <- NN
A1A2 <- NN
A2A2 <- NN
# make into a vector
observed <- c(A1A1, A1A2, A2A2)
# calculate total number of alleles
n <- 2*sum(observed)
# calculate frequency of A1 or p
p <- (2*(A1A1) + A1A2)/n
# calculate frequency of A2 or q
q <- (2*(A2A2) + A1A2)/n
# print frequencies to screen
c(p, q)
# generate the expected genotype frequencies
A1A1_e <- p^2
A1A2_e <- 2 * (p * q)
A2A2_e <- q^2
# combine into a vector
expected_freq <- c(A1A1_e, A1A2_e, A2A2_e)
# calculate expected genotype numbers
expected <- expected_freq * n
# combine observed and expected frequencies into a matrix
mydata <- cbind(observed, expected)
# add rownames
rownames(mydata) <- c("A1A1", "A1A2", "A2A2")
#Statistical test of deviation from HW
chi <- sum(((expected - observed)^2)/expected)
1 - pchisq(chi, df = 2)
#############################################################
# 						Exercise 2							#
#				Selection and allele dynamics 				#
#############################################################
# define the number of offspring per genotype (fitness)
a <- c(16, 16, 11)
n <- sum(a) #total number of individuals in the population
# find the maximum fitness
max_fit <- max(a)
# determine the relative fitness
rel_fit <- a/max_fit
# define the genotype frequencies -
geno_freq <- c(A1A1=0.65,A1A2=0.15,A2A2=0.2)
# calculate mean population fitness
w_bar <- sum(rel_fit * geno_freq)
## first calculate the allele frequencies
# define the total number of alleles
n <- 2*sum(a)
# calculate p
p <- ((a[1] * 2) + a[2])/n
# calculate q
q <- 1 - p
## now calculate the marginal fitness
w1 <- (p*rel_fit[1]) + (q*rel_fit[2])
w2 <- (p*rel_fit[2]) + (q*rel_fit[3])
#change in p after one round of selection
p_t <- (p*w1)/w_bar
delta_p <- p_t - p
#If everything worked correctly, your delta_p should be 0.0372093.
#Simulating selection
# first make a simple function to demonstrate the one locus selection model
selection_model <- function(p, rel_fit){
# define q
q <- 1 - p
# calculate genotype frequencies (under HWE)
gf <- c(p^2, 2*(p*q), q^2)
# calculate mean pop fitness
w_bar <- sum(rel_fit*gf)
# calculate marginal allele frequencies
w1 <- (p*rel_fit[1]) + (q*rel_fit[2])
w2 <- (p*rel_fit[2]) + (q*rel_fit[3])
# calculate freq of p in the next generation
p_t <- (p*w1)/w_bar
# return the results
return(p_t)
}
# keeping the initial frequency constant but varying relative fitness of homozygous recessive individuals
selection_model(p = 0.5, rel_fit = c(1, 1, 0.75))
selection_model(p = 0.5, rel_fit = c(1, 1, 0.5))
selection_model(p = 0.5, rel_fit = c(1, 1, 0.3))
#Then do this across generations
# first initialise the values
p <- p_init <- 0.5
n_gen <- 100
# use sapply to repeatedly run the selection model
p_vec <- sapply(1:n_gen, function(y){
p_t <- selection_model(p = p, rel_fit = c(1, 1, 0.75))
p <<- p_t
})
# combine the initial p and the values of p across each generation
p_vec <- c(p_init, p_vec)
#Q1: look at the p_vec object. What does this contain? What seems to be happening with the allele frequency at this locus? What is the allele frequency at generation 100 for each of the scenarios above?
## We will now make a simulator function ##
selection_sim <- function(p, rel_fit, n_gen){
# initialise variables
p_init <- p
my_rel_fit <- rel_fit
# use sapply to repeatedly run the selection model
p_vec <- sapply(1:n_gen, function(y){
p_t <- selection_model(p = p, rel_fit = my_rel_fit)
p <<- p_t
})
# combine the initial p and the values of p across each generation
p_vec <- c(p_init, p_vec)
# return the output
return(p_vec)
}
# Test the selection simulator
selection_sim(p = 0.5, rel_fit = c(1, 1, 0.75), n_gen = 1000)
# Hopefully working and you saw a loong (n=1000) list of allele frequencies. Now we will perform 4 simulations for 200 generations, keeping our initial frequency of p at 0.5. However, we will alter the relative fitness of the recessive genotype from 0.2 to 0.8. We can also do this very easily with vectorisation:
# set the vector for the relative fitness of A2A2
A2A2_rf <- seq(from = 0.2, to = 0.8, by = 0.2)
# run simulations for each
sel_sims <- sapply(A2A2_rf, function(z){
selection_sim(p = 0.5, rel_fit = c(1, 1, z), n_gen = 200)
})
# assign names to the matrix
colnames(sel_sims) <- paste0("w22=", A2A2_rf)
# create a generations vector
g <- seq(0, 200, 1)
# combine together to make a tibble
install.packages("tibble") #install dependent package; if asked about installing from source needing compilation answer n and hit enter
library(tibble)
sel_sims <- as_tibble(cbind(g, sel_sims)) #makes a new dataframe object with results from simulations
# inspect the sel_sims object. What does it contain?
# We can write a function to include also other information into our object such as mean population fitness, allele frequencies, genotype frequencies etc
selection_model <- function(p, rel_fit){
# define q
q <- 1 - p
# calculate genotype frequencies (under HWE)
gf <- c(p^2, 2*(p*q), q^2)
# calculate mean pop fitness
w_bar <- sum(rel_fit*gf)
# calculate marginal allele frequencies
w1 <- (p*rel_fit[1]) + (q*rel_fit[2])
w2 <- (p*rel_fit[2]) + (q*rel_fit[3])
# calculate freq of p in the next generation
p_t <- (p*w1)/w_bar
# make list for output
output <- list(p = p, q = q, geno_freq = gf, w_bar = w_bar,
w1 = w1, w2 = w2, p_t = p_t)
# return the results
return(output)
}
# keeping the initial frequency constant
selection_model(p = 0.5, rel_fit = c(0.8, 1, 0.7))
#need to install dplyr to use map_dfr to pull out list
install.packages("dplyr")
library(dplyr)
library(purrr) #should be part of BASE installation if not then use install.packages("purrr")
# And then we use sapply to run this across generations
selection_sim <- function(p, rel_fit, n_gen){
# initialise variables
p_init <- p
my_rel_fit <- rel_fit
# use sapply to repeatedly run the selection model
sim <- sapply(1:n_gen, function(y){
out <- selection_model(p = p, rel_fit = my_rel_fit)
p <<- out$p_t
# return list
return(out)
}, simplify = FALSE)
# use map data.frame to extract data we want
sim_data <- sim %>%
map_dfr(magrittr::extract, c('p', 'q', 'w_bar',
'w1', 'w2', 'p_t'))
# return the output
return(sim_data)
}
##OK, now we have a function that outputs all the parameters that we want and that runs over multiple generations that we can use
## We will now explore the effect of dominance on the rate of change in allele frequencies at different starting allele frequencies
# set generations
n_gen <- 10
# run simulations
dom <- selection_sim(p = 0.01, rel_fit = c(1, 0.9, 0.2), n_gen)
add <- selection_sim(p = 0.01, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.01, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
#This plots shows the change in allele frequencies over genreations (50) for three diffferent population genetic models starting at the same frequency
#Q4: Try out different starting allele frequencies (e.g. P0 = 0.01,0.1 and p=0.5 and different fitness scenarios (dominance, co-dominance, heterozygote advantage (overdominance), underdominance and recessive model). When is selection most efficient and why? What scenarios maintain variation and which do not? Why does rate of increase in allele frequency vary with the dominance relationship even at identical starting allele frequency (hint: think back to plot of the frequency of different genotypes as a function of allele frequency in the population genetics lecture)?
n_gen <- 10
# run simulations
dom <- selection_sim(p = 0.01, rel_fit = c(1, 0.9, 0.2), n_gen)
add <- selection_sim(p = 0.01, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.01, rel_fit = c(1, 0.2, 0.2), n_gen)
overd <- selection_sim(p = 0.01, rel_fit = c(0.4, 1, 0.2), n_gen)
underd <- selection_sim(p = 0.01, rel_fit = c(1, 0.4, 1), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
lines(g, overd$p, lwd = 2, col = "purple")
lines(g, underd$p, lwd = 2, col = "orange")
#This plots shows the change in allele frequencies over genreations (50) for three diffferent population genetic models starting at the same frequency
#Q4: Try out different starting allele frequencies (e.g. P0 = 0.01,0.1 and p=0.5 and different fitness scenarios (dominance, co-dominance, heterozygote advantage (overdominance), underdominance and recessive model). When is selection most efficient and why? What scenarios maintain variation and which do not? Why does rate of increase in allele frequency vary with the dominance relationship even at identical starting allele frequency (hint: think back to plot of the frequency of different genotypes as a function of allele frequency in the population genetics lecture)?
# run simulations
dom <- selection_sim(p = 0.1, rel_fit = c(1, 0.9, 0.2), n_gen)
add <- selection_sim(p = 0.1, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.1, rel_fit = c(1, 0.2, 0.2), n_gen)
overd <- selection_sim(p = 0.1, rel_fit = c(0.4, 1, 0.2), n_gen)
underd <- selection_sim(p = 0.1, rel_fit = c(1, 0.4, 1), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
lines(g, overd$p, lwd = 2, col = "purple")
lines(g, underd$p, lwd = 2, col = "orange")
#This plots shows the change in allele frequencies over genreations (50) for three diffferent population genetic models starting at the same frequency
#Q4: Try out different starting allele frequencies (e.g. P0 = 0.01,0.1 and p=0.5 and different fitness scenarios (dominance, co-dominance, heterozygote advantage (overdominance), underdominance and recessive model). When is selection most efficient and why? What scenarios maintain variation and which do not? Why does rate of increase in allele frequency vary with the dominance relationship even at identical starting allele frequency (hint: think back to plot of the frequency of different genotypes as a function of allele frequency in the population genetics lecture)?
n_gen <- 10
# run simulations
dom <- selection_sim(p = 0.5, rel_fit = c(1, 0.9, 0.2), n_gen)
add <- selection_sim(p = 0.5, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.5, rel_fit = c(1, 0.2, 0.2), n_gen)
overd <- selection_sim(p = 0.5, rel_fit = c(0.4, 1, 0.2), n_gen)
underd <- selection_sim(p = 0.5, rel_fit = c(1, 0.4, 1), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
lines(g, overd$p, lwd = 2, col = "purple")
lines(g, underd$p, lwd = 2, col = "orange")
#This plots shows the change in allele frequencies over genreations (50) for three diffferent population genetic models starting at the same frequency
#Q4: Try out different starting allele frequencies (e.g. P0 = 0.01,0.1 and p=0.5 and different fitness scenarios (dominance, co-dominance, heterozygote advantage (overdominance), underdominance and recessive model). When is selection most efficient and why? What scenarios maintain variation and which do not? Why does rate of increase in allele frequency vary with the dominance relationship even at identical starting allele frequency (hint: think back to plot of the frequency of different genotypes as a function of allele frequency in the population genetics lecture)?
View(sel_sims)
View(sel_sims)
View(sel_sims)
p_vec
install.packages("PopGenome")
library(tidyverse)
library(PopGenome)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(PopGenome)
library(tidyverse)
install.packages("curl")
install.packages("tidyverse")
library(PopGenome)
library(tidyverse)
LnL(Js)=	-207.497102
LnL(Ks)	=-204.494923
LnL(Rs)	=-192.634719
LnL_Js=	-207.497102
LnL_Ks	=-204.494923
LnL_Rs	=-192.634719
LR_JK_s <- 2 * (LnL_Ks-LnL_Js)
LR_KR_s <- 2 * (LnL_Rs-LnL_Ks)
LRT_JK <- pchisq(q = LR_JK_s, df = 1, lower.tail = FALSE)
LnL_K80 =	-207.497102
LnL_JC69	=-204.494923
LR_K80_JC69 <- 2 * (LnL_K80 - LnL_JC69)
#LR_KR_s <- 2 * (LnL_Rs-LnL_Ks)
LRT_K80_JC69 <- pchisq(q = LR_K80_JC69, df = 1, lower.tail = FALSE)
LnL_Js=	-207.497102
LnL_Ks	=-204.494923
LnL_Rs	=-192.634719
LR_JK_s <- 2 * (LnL_Ks-LnL_Js)
LR_KR_s <- 2 * (LnL_Rs-LnL_Ks)
LRT_JK <- pchisq(q = LR_JK_s, df = 1, lower.tail = FALSE)
LnL_JC69=	-207.497102
LnL_K80	=-204.494923
#LnL_Rs	=-192.634719
LR_K80_JC69 <- 2 * (LnL_K80-LnL_JC69)
#LR_KR_s <- 2 * (LnL_Rs-LnL_Ks)
LRT_K80_JC69 <- pchisq(q = LR_K80_JC69, df = 1, lower.tail = FALSE)
LnL_JC69=	-207.497102     # model A
LnL_K80	=-204.494923      # model B
LnL_REV	=-192.634719	    # model C
LR_K80_JC69 <- 2 * (LnL_K80 - LnL_JC69)
LR_REV_K80 <- 2 * (LnL_REV - LnL_K80)
LRT_K80_JC69 <- pchisq(q = LR_K80_JC69, df = 1, lower.tail = FALSE)
LRT_REV_K80 <- pchisq(q = LR_REV_K80, df = 4, lower.tail = FALSE)
LnL_JC69 =	-3566.384298     # model A
LnL_K80	= -3344.009028      # model B
LnL_REV	= -3337.718620	    # model C
LR_K80_JC69 <- 2 * (LnL_K80 - LnL_JC69)
LR_REV_K80 <- 2 * (LnL_REV - LnL_K80)
LRT_K80_JC69 <- pchisq(q = LR_K80_JC69, df = 1, lower.tail = FALSE)
LRT_REV_K80 <- pchisq(q = LR_REV_K80, df = 4, lower.tail = FALSE)
LRT_REV_K80 <- pchisq(q = LR_REV_K80, df = 10, lower.tail = FALSE)
LRT_REV_K80 <- pchisq(q = LR_REV_K80, df = 12, lower.tail = FALSE)
LnL_A =	-3566.384298     # model A
LnL_B	= -3344.009028      # model B
LnL_C	= -3337.718620	    # model C
LR_B_A <- 2 * (LnL_B - LnL_A)
LR_C_B <- 2 * (LnL_C - LnL_B)
LRT_B_A <- pchisq(q = LR_B_A, df = 1, lower.tail = FALSE)
LRT_C_B <- pchisq(q = LR_C_B, df = 12, lower.tail = FALSE)
LnL_D =	-3309.687133    # model D
LnL_D_0	= -3309.687131     # model D_0
LR_D_D_0 <- 2 * (LnL_D - LnL_D_0)
LRT_D_D_0 <- pchisq(q = LR_D_D_0, df = 1, lower.tail = FALSE)
LnL_D =	-3309.687133    # model D
LnL_D_null	= -3309.687131     # model D_0
LR_D_D_null <- 2 * (LnL_D - LnL_D_null)
LRT_D_D_null <- pchisq(q = LR_D_D_null, df = 1, lower.tail = FALSE)
LR_D_D_null <- 2 * (LnL_D_null - LnL_D)
LRT_D_D <- pchisq(q = LR_D_D_null, df = 1, lower.tail = FALSE)
LnL_D =	-3309.687133           # model D
LnL_D_null	= -3309.687131     # model D_0
LR_D_D_null <- 2 * (LnL_D - LnL_D_null)
LRT_D_D_null <- pchisq(q = LR_D_D_null, df = 1, lower.tail = FALSE)
library("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
directory <- "/home/ferall/Dropbox/0MSc_Bioinfo_Uppsala/Sem1_1MB462_Genome_Analysis/2020.03_GenomeAnalysisCourse/Counts/13_deseq/"
setwd(directory)
# download DESeq2 package
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
browseVignettes("DESeq2")
BiocManager::available()
BiocManager::available(D*)
BiocManager::available(^De)
BiocManager::available("^De")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
pkgs <- rownames(installed.packages())
BiocManager::install(pkgs, type = "source", checkBuilt = TRUE)
library("DESeq2")
.libPaths()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
remove.packages(c(‘annotate’, ‘genefilter’, ‘geneplotter’, 'DESeq2'), lib = "/usr/lib/R/library")
remove.packages(c('annotate', 'genefilter', 'geneplotter', 'DESeq2'), lib = "/usr/lib/R/library")
BiocManager::install(c("PKG1", "PKG2", "PKG3"), lib="/home/ferall/R/x86_64-pc-linux-gnu-library/3.6")
BiocManager::install(c('annotate', 'genefilter', 'geneplotter', 'DESeq2'), lib="/home/ferall/R/x86_64-pc-linux-gnu-library/3.6")
BiocManager::install(c('XML'), lib="/home/ferall/R/x86_64-pc-linux-gnu-library/3.6")
BiocManager::install_version('XML', '3.99-0.3'), lib="/home/ferall/R/x86_64-pc-linux-gnu-library/3.6")
BiocManager::install_version(('XML', '3.99-0.3'), lib="/home/ferall/R/x86_64-pc-linux-gnu-library/3.6")
BiocManager::install_version('XML', '3.99-0.3')
devtools::install_version('XML', '3.99-0.3')
updateR()
install.packages("XML")
